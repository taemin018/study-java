제어문
	컴파일러의 흐름을 제어할 수 있는 문법.

	▶ 조건문
		▷if문
			if(조건식){
				실행할 문장;
			}
			(1)  위의 조건식 결과와 상관 없이 무조건 검사
			if(조건식){
				실행할 문장;
			}
			if(조건식){
				실행할 문장;
			}
			...

			if(조건식){
				실행할 문장;
			}
			(2) 위의 조건식이 false여야 검사, true라면 검사하지 않는다.
			else if(조건식){
				실행할 문장;
			}
			else if(조건식){
				실행할 문장;
			}
			...
			else {
				실행할 문장;
			}

		▷switch문
			switch(값) {
			case 값1:
				실행할 문장;
				break;
			case 값2:
				실행할 문장;
				break;
		
			...
			default:
				실행할 문장;
				break;
			}


	※ 삼항 연산자, if문, switch문의 비교
		삼항 연산자: 조건식을 1개만 사용할 때
		if문: 조건식에 비교(>, <, >=, <=) 연산자를 사용하거나, 여러 개의 조건식을 논리 연산자로 연결할 때
		switch문: 하나의 변수에 여러 경우의 값이 담길 수 있고, 각 값이 같은지 비교할 때


	▶ 반복문
		▷ for문
			int i = 0;    i < 10;   i ++
			for(초기식; 조건식; 증감식) {
				실행할 문장;
			}

			1. 초기식
			-------------------
			2. 조건식(true)
			3. 실행할 문장
			4. 증감식

			5. 조건식(true)
			6. 실행할 문장
			7. 증감식

			8. 조건식(false)
			9. 종료

		▷ while문
			while(조건식){
				실행할 문장;
			}

		▷ do ~ while문
			do {
				실행할 문장;
			} while(조건식);

	※ for문, while문, do~while문
		for문: 몇 번 반복할지 알 때
		while문: 몇 번 반복할지 모를 때
		do~while문: 무조건 처음 한 번은 실행해야 할 때

기타 제어문
	break: 즉시 해당 중괄호 영역을 탈출한다.
		- if문 안에서 사용 시, if문을 탈출하는 게 아니라 감싸고 있는 중괄호 영역을 탈출한다.

	continue: 즉시 다음 반복으로 넘어간다.
		- 아래의 코드를 실행하지 않기 위해서 사용한다.

















