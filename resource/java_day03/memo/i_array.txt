배열: 저장공간의 나열
	1.
		변수를 여러 개 선언하면 이름도 여러 개 생긴다. 이 때 각 저장공간을 관리하기
		불편하다. 따라서 n칸 배열을 한 번만 선언하면 저장공간도 n개 생기고,
		이름도 한 개이기 때문에 관리하기 편하다.
	2.
		규칙성이 없는 값에 규칙성을 부여하기 위해서

배열의 선언
	자료형[] 배열명 = {값1, 값2, ...}; // 어떤 값을 넣을지 알 때 사용한다.
	자료형[] 배열명 = new 자료형[칸수] // 어떤 값을 넣을지는 모르나, 몇 칸 만들지는 알 때 사용한다.
	자료형[] 배열명 = null; // 어떤 값을 넣을지도 모르고, 몇 칸 만들지도 모를 때 사용한다.

	※ new: Heap 메모리에 할당, 초기값으로 자동 초기화
	※ null: 주소의 초기값, 어떤 주소를 넣을지 모를 때 작성하는 값
	※ 자바에서 배열은 항상 Heap(동적 메모리에)에 할당되기 때문에 메모리 상으로는 동적 배열만 존재한다.

배열의 구조
	int[] arData = {3, 5, 1, 2, 8};

	arData라는 이름의 저장공간 한 개가 만들어지며, 여기에는 한 개의 값만 담을 수 있다.
	5개의 값을 담기 위해서는 5칸이 필요하며, 이는 Heap 메모리에 할당된다.
	5칸의 저장공간 중, 첫 번째 저장공간의 주소값이 arData 저장공간으로 들어가며,
	다음 주소에 접근하기 위해서는 + n을 한다.
	예를 들어 arData + 2는 1이라는 값이 담긴 주소값이 되며,
	*(arData + 2)는 해당 주소에 가서 읽어온 1이라는 값이 된다.
	JAVA에서는 직접 주소에 접근하는 연산자가 없기 때문에 위와 같은 식을 []로 치환하여 사용한다.
	즉, arData[2]는 1이란 값이 된다. 방 번호는 index라고 부르며, 배열은 시작주소를 가지고 있기 때문에
	인덱스 번호는 항상 0부터 시작된다.

length
	배열을 선언하면 length라는 상수가 선언되고, 해당 배열의 길이가 담긴다.
	배열명.length로 사용하게 된다.

배열의 사용
	int[] arData = new int[5];	// 저장공간
	arData[0] = 120;		// 저장공간
	arData[0] + 9		// 값
	System.out.println(arData)	// 주소값
	arData[2] = arData[0] + arData[1] // 저장공간, 값, 값
	System.out.println(arData[5]);	// 오류












