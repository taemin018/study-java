함수형 인터페이스(Functional Interface)
	인터페이스 중 추상 메소드를 하나만 가지고 있는 인터페이스를 함수형 인터페이스라고 한다.
	이 때 @FunctionalInterface를 인터페이스 위에 작성하여 단 하나의 추상 메소드만 선언하도록 제한한다.

람다식(Lambda Expression)
	함수형 인터페이스에서는 한 개의 추상 메소드만 존재하기 때문에 구현 시 메소드 이름이 딱히 필요가 없다.
	람다식은 이름이 없는 메소드로서, 값처럼 사용이 가능하고 당연히 매개변수로도 전달이 가능하다.
	따라서 람다식을 익명 메소드(Anonymous Method)라고도 부른다.

람다식 문법
	1. (매개변수 형식 나열, ...) -> 리턴값;
	2. (매개변수 형식 나열, ...) -> {실행할 문장; return 리턴값;};
	3. 매개변수 -> 리턴값;
	4. 매개변수 -> {실행할 문장; return 리턴값;};
	5. 참조형(::)
		생성자 참조
			클래스명::new
		메소드 참조
			static, 접근한 객체의 메소드:	클래스명::메소드명
			일반:			객체명::메소드명	

[기초 실습]
	package는 lambdaTask로 선언한다.
	
	PrintName 인터페이스 선언
	String getFullName(String, String) 추상 메소드 선언
	- 성과 이름을 전달받는다.

	PrintNameTest 클래스 선언
	void printFullName(PrintName, String, String) 메소드 선언
	- 외부에서 구현된 PrintName을 전달받은 뒤 전체 이름을 출력

	main 메소드에서 printFullName()을 사용하여 테스트 진행

[심화 실습]
여러 개의 정수를 입력받아서 알맞는 덧셈, 뺄셈 결과를 확인하는 애플리케이션 제작

입력 예1) 7 + 35 - 9
출력 예1) 33

입력 예2) -9 + 8 + 10
출력 예2) 9

* 사용자가 정상적으로만 입력한다는 가정 하에 구현하도록 한다.
* 두 정수를 전달받은 후 int로 리턴하는 calc 추상메소드 선언(함수형 인터페이스 제작) - Calc
* 두 정수의 덧셈, 뺄셈을 구해주는 함수형 인터페이스를 리턴하는 static 메소드 선언(람다식 리턴, 이름은 operate)- MyMath
* 전체 식을 전달받은 후 String[]로 리턴하는 getOpers 추상메소드 선언(함수형 인터페이스 제작) - OperCheck
* main메소드에 getOpers를 람다식으로 구현 - MyMath(메인 메소드 선언)
* 첫번째 정수가 음수일 경우 오류 해결













